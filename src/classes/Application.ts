import fs from "fs";

interface IEnv {
    optional: boolean;
    key: string;
    value: string;
}

export interface IApplication {
    displayName: string; // Display name of the application
    name: string;
    runCommand: string; // Command to run the app, `npm run dev` or `app.js`
    portEnv?: string; // Environment variable to change port (optional)
    defaultPort: number; // Default port
    env: IEnv[]; // Array of current environment variables
    pacman: "npm" | "yarn" | "pip"; // node package manager, npm or yarn
    icon: string; // url or file path to icon
    trackingName?: string;
    updateEnv: Function;
}

export class Application implements IApplication {
    defaultPort: number;
    displayName: string;
    name: string;
    env: IEnv[];
    icon: string;
    pacman: "npm" | "yarn" | "pip";
    portEnv?: string;
    runCommand: string;
    trackingName?: string;

    constructor(inObj : IApplication) {
        this.defaultPort = Number(inObj.defaultPort);
        this.displayName = String(inObj.displayName);
        this.env = inObj.env;
        this.icon = String(inObj.icon);
        this.pacman = inObj.pacman;
        this.portEnv = inObj.portEnv ? String(inObj.portEnv) : undefined;
        this.runCommand = String(inObj.runCommand);
        this.trackingName = inObj.trackingName ? String(inObj.trackingName) : undefined;
        // Generate name from displayName for use as an identifier.
        // Any non-alphanumeric character will be removed, spaces turned into dashes and lowercased.
        // "EMS BackendðŸ˜»" -> "ems-backend"
        this.name = this.displayName.toLowerCase().replace(/ /gm, "-").replace(/[^a-zA-Z0-9-]/gm, "");

        // Make sure all required keys are present
        let inObjKeys = Object.keys(inObj);
        let appKeys = Object.getOwnPropertyNames(this);

        appKeys.forEach(key => {
            // portEnv and trackingName are optional, name is generated by class constructor, updateEnv is a method
            if (key !== "portEnv" && key !== "trackingName" && key !== "updateEnv" && key !== "name" && !inObjKeys.includes(key)) throw "Object is not an application definition";
        })
        // Pacman can only be npm or yarn, env is an object (See IEnv[])
        if (this.pacman !== "npm" && this.pacman !== "yarn" && this.pacman !== "pip") throw "Package manager should be npm, yarn or pip";
        if (typeof this.env !== "object") throw "Env should be an object";
    }

    updateEnv(newEnv) {
        return new Promise<void>((resolve) => {
            // Create .env file based on the env object of the app definition
            // KEY=VALUE\nKEY2=VALUE2
            this.env = newEnv;
            let envContent : string = "";
            let i = 0;
            this.env.forEach(envEntry => {
                i++;
                envContent += `${envEntry.key}=${envEntry.value}\n`;
                if (i === this.env.length) {
                    fs.writeFileSync(`/litdevs/ems-internal/app-definitions/${this.name}.json`, JSON.stringify(this, null, 4));
                    fs.writeFileSync(`/litdevs/projects/${this.name}/.env`, envContent)
                    resolve();
                }
            })
        })
    }
}